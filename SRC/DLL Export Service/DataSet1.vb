'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableLog As LogDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Log")) Is Nothing) Then
                Me.Tables.Add(New LogDataTable(ds.Tables("Log")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Log As LogDataTable
        Get
            Return Me.tableLog
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Log")) Is Nothing) Then
            Me.Tables.Add(New LogDataTable(ds.Tables("Log")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableLog = CType(Me.Tables("Log"),LogDataTable)
        If (Not (Me.tableLog) Is Nothing) Then
            Me.tableLog.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("zh-CN")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableLog = New LogDataTable
        Me.Tables.Add(Me.tableLog)
    End Sub
    
    Private Function ShouldSerializeLog() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub LogRowChangeEventHandler(ByVal sender As Object, ByVal e As LogRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnEvtID As DataColumn
        
        Private columnEvtName As DataColumn
        
        Private columnTime As DataColumn
        
        Private columnSource As DataColumn
        
        Private column_User_Group As DataColumn
        
        Private columnPatternName As DataColumn
        
        Private columnMaterialBatch As DataColumn
        
        Private columnType As DataColumn
        
        Private column_in_ As DataColumn
        
        Private column_out_ As DataColumn
        
        Private column_pass_ As DataColumn
        
        Private column_Fp_ As DataColumn
        
        Private column_Ft_ As DataColumn
        
        Private column_time_B As DataColumn
        
        Private column_B_h As DataColumn
        
        Private columnRunTime As DataColumn
        
        Private columnDownTime As DataColumn
        
        Private columnPause As DataColumn
        
        Private columnVolCal As DataColumn
        
        Private columnNeedleCal As DataColumn
        
        Private columnSPCName As DataColumn
        
        Private columnUserAction As DataColumn
        
        Friend Sub New()
            MyBase.New("Log")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property EvtIDColumn As DataColumn
            Get
                Return Me.columnEvtID
            End Get
        End Property
        
        Friend ReadOnly Property EvtNameColumn As DataColumn
            Get
                Return Me.columnEvtName
            End Get
        End Property
        
        Friend ReadOnly Property TimeColumn As DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        Friend ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Friend ReadOnly Property _User_GroupColumn As DataColumn
            Get
                Return Me.column_User_Group
            End Get
        End Property
        
        Friend ReadOnly Property PatternNameColumn As DataColumn
            Get
                Return Me.columnPatternName
            End Get
        End Property
        
        Friend ReadOnly Property MaterialBatchColumn As DataColumn
            Get
                Return Me.columnMaterialBatch
            End Get
        End Property
        
        Friend ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Friend ReadOnly Property _in_Column As DataColumn
            Get
                Return Me.column_in_
            End Get
        End Property
        
        Friend ReadOnly Property _out_Column As DataColumn
            Get
                Return Me.column_out_
            End Get
        End Property
        
        Friend ReadOnly Property _pass_Column As DataColumn
            Get
                Return Me.column_pass_
            End Get
        End Property
        
        Friend ReadOnly Property _Fp_Column As DataColumn
            Get
                Return Me.column_Fp_
            End Get
        End Property
        
        Friend ReadOnly Property _Ft_Column As DataColumn
            Get
                Return Me.column_Ft_
            End Get
        End Property
        
        Friend ReadOnly Property _time_BColumn As DataColumn
            Get
                Return Me.column_time_B
            End Get
        End Property
        
        Friend ReadOnly Property _B_hColumn As DataColumn
            Get
                Return Me.column_B_h
            End Get
        End Property
        
        Friend ReadOnly Property RunTimeColumn As DataColumn
            Get
                Return Me.columnRunTime
            End Get
        End Property
        
        Friend ReadOnly Property DownTimeColumn As DataColumn
            Get
                Return Me.columnDownTime
            End Get
        End Property
        
        Friend ReadOnly Property PauseColumn As DataColumn
            Get
                Return Me.columnPause
            End Get
        End Property
        
        Friend ReadOnly Property VolCalColumn As DataColumn
            Get
                Return Me.columnVolCal
            End Get
        End Property
        
        Friend ReadOnly Property NeedleCalColumn As DataColumn
            Get
                Return Me.columnNeedleCal
            End Get
        End Property
        
        Friend ReadOnly Property SPCNameColumn As DataColumn
            Get
                Return Me.columnSPCName
            End Get
        End Property
        
        Friend ReadOnly Property UserActionColumn As DataColumn
            Get
                Return Me.columnUserAction
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LogRow
            Get
                Return CType(Me.Rows(index),LogRow)
            End Get
        End Property
        
        Public Event LogRowChanged As LogRowChangeEventHandler
        
        Public Event LogRowChanging As LogRowChangeEventHandler
        
        Public Event LogRowDeleted As LogRowChangeEventHandler
        
        Public Event LogRowDeleting As LogRowChangeEventHandler
        
        Public Overloads Sub AddLogRow(ByVal row As LogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLogRow( _
                    ByVal EvtID As Integer,  _
                    ByVal EvtName As String,  _
                    ByVal Time As String,  _
                    ByVal Source As String,  _
                    ByVal _User_Group As String,  _
                    ByVal PatternName As String,  _
                    ByVal MaterialBatch As String,  _
                    ByVal Type As String,  _
                    ByVal _in_ As String,  _
                    ByVal _out_ As String,  _
                    ByVal _pass_ As String,  _
                    ByVal _Fp_ As String,  _
                    ByVal _Ft_ As String,  _
                    ByVal _time_B As String,  _
                    ByVal _B_h As String,  _
                    ByVal RunTime As String,  _
                    ByVal DownTime As String,  _
                    ByVal Pause As String,  _
                    ByVal VolCal As String,  _
                    ByVal NeedleCal As String,  _
                    ByVal SPCName As String,  _
                    ByVal UserAction As String) As LogRow
            Dim rowLogRow As LogRow = CType(Me.NewRow,LogRow)
            rowLogRow.ItemArray = New Object() {Nothing, EvtID, EvtName, Time, Source, _User_Group, PatternName, MaterialBatch, Type, _in_, _out_, _pass_, _Fp_, _Ft_, _time_B, _B_h, RunTime, DownTime, Pause, VolCal, NeedleCal, SPCName, UserAction}
            Me.Rows.Add(rowLogRow)
            Return rowLogRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As LogRow
            Return CType(Me.Rows.Find(New Object() {ID}),LogRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LogDataTable = CType(MyBase.Clone,LogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnEvtID = Me.Columns("EvtID")
            Me.columnEvtName = Me.Columns("EvtName")
            Me.columnTime = Me.Columns("Time")
            Me.columnSource = Me.Columns("Source")
            Me.column_User_Group = Me.Columns("User/Group")
            Me.columnPatternName = Me.Columns("PatternName")
            Me.columnMaterialBatch = Me.Columns("MaterialBatch")
            Me.columnType = Me.Columns("Type")
            Me.column_in_ = Me.Columns("in#")
            Me.column_out_ = Me.Columns("out#")
            Me.column_pass_ = Me.Columns("pass#")
            Me.column_Fp_ = Me.Columns("Fp#")
            Me.column_Ft_ = Me.Columns("Ft#")
            Me.column_time_B = Me.Columns("time/B")
            Me.column_B_h = Me.Columns("B/h")
            Me.columnRunTime = Me.Columns("RunTime")
            Me.columnDownTime = Me.Columns("DownTime")
            Me.columnPause = Me.Columns("Pause")
            Me.columnVolCal = Me.Columns("VolCal")
            Me.columnNeedleCal = Me.Columns("NeedleCal")
            Me.columnSPCName = Me.Columns("SPCName")
            Me.columnUserAction = Me.Columns("UserAction")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnEvtID = New DataColumn("EvtID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEvtID)
            Me.columnEvtName = New DataColumn("EvtName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEvtName)
            Me.columnTime = New DataColumn("Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTime)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.column_User_Group = New DataColumn("User/Group", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_User_Group)
            Me.columnPatternName = New DataColumn("PatternName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPatternName)
            Me.columnMaterialBatch = New DataColumn("MaterialBatch", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaterialBatch)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.column_in_ = New DataColumn("in#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_in_)
            Me.column_out_ = New DataColumn("out#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_out_)
            Me.column_pass_ = New DataColumn("pass#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_pass_)
            Me.column_Fp_ = New DataColumn("Fp#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Fp_)
            Me.column_Ft_ = New DataColumn("Ft#", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Ft_)
            Me.column_time_B = New DataColumn("time/B", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_time_B)
            Me.column_B_h = New DataColumn("B/h", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_B_h)
            Me.columnRunTime = New DataColumn("RunTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRunTime)
            Me.columnDownTime = New DataColumn("DownTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDownTime)
            Me.columnPause = New DataColumn("Pause", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPause)
            Me.columnVolCal = New DataColumn("VolCal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVolCal)
            Me.columnNeedleCal = New DataColumn("NeedleCal", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNeedleCal)
            Me.columnSPCName = New DataColumn("SPCName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCName)
            Me.columnUserAction = New DataColumn("UserAction", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserAction)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewLogRow() As LogRow
            Return CType(Me.NewRow,LogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LogRowChangedEvent) Is Nothing) Then
                RaiseEvent LogRowChanged(Me, New LogRowChangeEvent(CType(e.Row,LogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LogRowChangingEvent) Is Nothing) Then
                RaiseEvent LogRowChanging(Me, New LogRowChangeEvent(CType(e.Row,LogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LogRowDeletedEvent) Is Nothing) Then
                RaiseEvent LogRowDeleted(Me, New LogRowChangeEvent(CType(e.Row,LogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LogRowDeletingEvent) Is Nothing) Then
                RaiseEvent LogRowDeleting(Me, New LogRowChangeEvent(CType(e.Row,LogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLogRow(ByVal row As LogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LogRow
        Inherits DataRow
        
        Private tableLog As LogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLog = CType(Me.Table,LogDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableLog.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableLog.IDColumn) = value
            End Set
        End Property
        
        Public Property EvtID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLog.EvtIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.EvtIDColumn) = value
            End Set
        End Property
        
        Public Property EvtName As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.EvtNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.EvtNameColumn) = value
            End Set
        End Property
        
        Public Property Time As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.TimeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.SourceColumn) = value
            End Set
        End Property
        
        Public Property _User_Group As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._User_GroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._User_GroupColumn) = value
            End Set
        End Property
        
        Public Property PatternName As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.PatternNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.PatternNameColumn) = value
            End Set
        End Property
        
        Public Property MaterialBatch As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.MaterialBatchColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.MaterialBatchColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.TypeColumn) = value
            End Set
        End Property
        
        Public Property _in_ As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._in_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._in_Column) = value
            End Set
        End Property
        
        Public Property _out_ As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._out_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._out_Column) = value
            End Set
        End Property
        
        Public Property _pass_ As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._pass_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._pass_Column) = value
            End Set
        End Property
        
        Public Property _Fp_ As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._Fp_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._Fp_Column) = value
            End Set
        End Property
        
        Public Property _Ft_ As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._Ft_Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._Ft_Column) = value
            End Set
        End Property
        
        Public Property _time_B As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._time_BColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._time_BColumn) = value
            End Set
        End Property
        
        Public Property _B_h As String
            Get
                Try 
                    Return CType(Me(Me.tableLog._B_hColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog._B_hColumn) = value
            End Set
        End Property
        
        Public Property RunTime As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.RunTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.RunTimeColumn) = value
            End Set
        End Property
        
        Public Property DownTime As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.DownTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.DownTimeColumn) = value
            End Set
        End Property
        
        Public Property Pause As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.PauseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.PauseColumn) = value
            End Set
        End Property
        
        Public Property VolCal As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.VolCalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.VolCalColumn) = value
            End Set
        End Property
        
        Public Property NeedleCal As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.NeedleCalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.NeedleCalColumn) = value
            End Set
        End Property
        
        Public Property SPCName As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.SPCNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.SPCNameColumn) = value
            End Set
        End Property
        
        Public Property UserAction As String
            Get
                Try 
                    Return CType(Me(Me.tableLog.UserActionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("无法获取值，因为它是 DBNull。", e)
                End Try
            End Get
            Set
                Me(Me.tableLog.UserActionColumn) = value
            End Set
        End Property
        
        Public Function IsEvtIDNull() As Boolean
            Return Me.IsNull(Me.tableLog.EvtIDColumn)
        End Function
        
        Public Sub SetEvtIDNull()
            Me(Me.tableLog.EvtIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEvtNameNull() As Boolean
            Return Me.IsNull(Me.tableLog.EvtNameColumn)
        End Function
        
        Public Sub SetEvtNameNull()
            Me(Me.tableLog.EvtNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableLog.TimeColumn)
        End Function
        
        Public Sub SetTimeNull()
            Me(Me.tableLog.TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableLog.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableLog.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_User_GroupNull() As Boolean
            Return Me.IsNull(Me.tableLog._User_GroupColumn)
        End Function
        
        Public Sub Set_User_GroupNull()
            Me(Me.tableLog._User_GroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPatternNameNull() As Boolean
            Return Me.IsNull(Me.tableLog.PatternNameColumn)
        End Function
        
        Public Sub SetPatternNameNull()
            Me(Me.tableLog.PatternNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaterialBatchNull() As Boolean
            Return Me.IsNull(Me.tableLog.MaterialBatchColumn)
        End Function
        
        Public Sub SetMaterialBatchNull()
            Me(Me.tableLog.MaterialBatchColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableLog.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableLog.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_in_Null() As Boolean
            Return Me.IsNull(Me.tableLog._in_Column)
        End Function
        
        Public Sub Set_in_Null()
            Me(Me.tableLog._in_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_out_Null() As Boolean
            Return Me.IsNull(Me.tableLog._out_Column)
        End Function
        
        Public Sub Set_out_Null()
            Me(Me.tableLog._out_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_pass_Null() As Boolean
            Return Me.IsNull(Me.tableLog._pass_Column)
        End Function
        
        Public Sub Set_pass_Null()
            Me(Me.tableLog._pass_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Fp_Null() As Boolean
            Return Me.IsNull(Me.tableLog._Fp_Column)
        End Function
        
        Public Sub Set_Fp_Null()
            Me(Me.tableLog._Fp_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Ft_Null() As Boolean
            Return Me.IsNull(Me.tableLog._Ft_Column)
        End Function
        
        Public Sub Set_Ft_Null()
            Me(Me.tableLog._Ft_Column) = System.Convert.DBNull
        End Sub
        
        Public Function Is_time_BNull() As Boolean
            Return Me.IsNull(Me.tableLog._time_BColumn)
        End Function
        
        Public Sub Set_time_BNull()
            Me(Me.tableLog._time_BColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_B_hNull() As Boolean
            Return Me.IsNull(Me.tableLog._B_hColumn)
        End Function
        
        Public Sub Set_B_hNull()
            Me(Me.tableLog._B_hColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRunTimeNull() As Boolean
            Return Me.IsNull(Me.tableLog.RunTimeColumn)
        End Function
        
        Public Sub SetRunTimeNull()
            Me(Me.tableLog.RunTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDownTimeNull() As Boolean
            Return Me.IsNull(Me.tableLog.DownTimeColumn)
        End Function
        
        Public Sub SetDownTimeNull()
            Me(Me.tableLog.DownTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPauseNull() As Boolean
            Return Me.IsNull(Me.tableLog.PauseColumn)
        End Function
        
        Public Sub SetPauseNull()
            Me(Me.tableLog.PauseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVolCalNull() As Boolean
            Return Me.IsNull(Me.tableLog.VolCalColumn)
        End Function
        
        Public Sub SetVolCalNull()
            Me(Me.tableLog.VolCalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNeedleCalNull() As Boolean
            Return Me.IsNull(Me.tableLog.NeedleCalColumn)
        End Function
        
        Public Sub SetNeedleCalNull()
            Me(Me.tableLog.NeedleCalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCNameNull() As Boolean
            Return Me.IsNull(Me.tableLog.SPCNameColumn)
        End Function
        
        Public Sub SetSPCNameNull()
            Me(Me.tableLog.SPCNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserActionNull() As Boolean
            Return Me.IsNull(Me.tableLog.UserActionColumn)
        End Function
        
        Public Sub SetUserActionNull()
            Me(Me.tableLog.UserActionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
